/**
 * ูุงุฌูุฉ ุฅุนุฏุงุฏุงุช ุงูุชุญููู ุงููุญุณู
 * Enhanced Analysis Settings Interface
 */

import React, { useState, useEffect } from 'react';

interface AnalysisSettingsProps {
  onConfigChange: (config: any) => void;
  theme: any;
  isMobile: boolean;
}

export const EnhancedAnalysisSettings: React.FC<AnalysisSettingsProps> = ({
  onConfigChange,
  theme,
  isMobile
}) => {
  const [config, setConfig] = useState({
    maxRetries: 8,
    baseDelay: 5000,
    maxDelay: 45000,
    criticalStageRetries: 12,
    failureRecoveryMode: 'retry_with_context' as 'skip' | 'retry_with_context' | 'block_until_success',
    qualityOverSpeed: true,
    patientMode: false
  });

  const [presetMode, setPresetMode] = useState<'balanced' | 'fast' | 'robust' | 'patient' | 'custom'>('balanced');

  // ุฅุนุฏุงุฏุงุช ูุญุฏุฏุฉ ูุณุจูุงู
  const presets = {
    fast: {
      maxRetries: 3,
      baseDelay: 2000,
      maxDelay: 15000,
      criticalStageRetries: 5,
      failureRecoveryMode: 'skip' as const,
      qualityOverSpeed: false,
      patientMode: false
    },
    balanced: {
      maxRetries: 5,
      baseDelay: 3000,
      maxDelay: 30000,
      criticalStageRetries: 8,
      failureRecoveryMode: 'retry_with_context' as const,
      qualityOverSpeed: true,
      patientMode: false
    },
    robust: {
      maxRetries: 8,
      baseDelay: 5000,
      maxDelay: 45000,
      criticalStageRetries: 12,
      failureRecoveryMode: 'retry_with_context' as const,
      qualityOverSpeed: true,
      patientMode: false
    },
    patient: {
      maxRetries: 15,
      baseDelay: 8000,
      maxDelay: 60000,
      criticalStageRetries: 20,
      failureRecoveryMode: 'block_until_success' as const,
      qualityOverSpeed: true,
      patientMode: true
    }
  };

  // ุชุญุฏูุซ ุงูุฅุนุฏุงุฏุงุช ุนูุฏ ุชุบููุฑ ุงูููุท ุงููุญุฏุฏ ูุณุจูุงู
  useEffect(() => {
    if (presetMode !== 'custom') {
      const newConfig = presets[presetMode];
      setConfig(newConfig);
      onConfigChange(newConfig);
    }
  }, [presetMode]);

  // ุชุญุฏูุซ ุงูุฅุนุฏุงุฏุงุช ุงููุฎุตุตุฉ
  const handleConfigChange = (key: string, value: any) => {
    const newConfig = { ...config, [key]: value };
    setConfig(newConfig);
    setPresetMode('custom');
    onConfigChange(newConfig);
  };

  return (
    <div style={{
      background: theme.card,
      borderRadius: 12,
      padding: isMobile ? 16 : 20,
      marginBottom: 16,
      border: `1px solid ${theme.border}`,
      boxShadow: `0 2px 10px ${theme.shadow}`
    }}>
      {/* ุงูุนููุงู */}
      <div style={{
        fontSize: isMobile ? 16 : 18,
        fontWeight: 'bold',
        color: theme.accent,
        marginBottom: 16,
        display: 'flex',
        alignItems: 'center',
        gap: 8
      }}>
        โ๏ธ ุฅุนุฏุงุฏุงุช ุงูุชุญููู ุงููุญุณู
      </div>

      {/* ุงูุฃููุงุท ุงููุญุฏุฏุฉ ูุณุจูุงู */}
      <div style={{ marginBottom: 20 }}>
        <div style={{
          fontSize: 14,
          fontWeight: 'bold',
          marginBottom: 10,
          color: theme.text
        }}>
          ุงุฎุชุฑ ููุท ุงูุชุญููู:
        </div>
        <div style={{
          display: 'grid',
          gridTemplateColumns: isMobile ? '1fr 1fr' : 'repeat(4, 1fr)',
          gap: 8
        }}>
          {Object.entries(presets).map(([key, preset]) => (
            <button
              key={key}
              onClick={() => setPresetMode(key as any)}
              style={{
                background: presetMode === key ? theme.accent : 'transparent',
                color: presetMode === key ? '#fff' : theme.text,
                border: `1px solid ${presetMode === key ? theme.accent : theme.input}`,
                borderRadius: 8,
                padding: '10px 8px',
                fontSize: 12,
                fontWeight: presetMode === key ? 'bold' : 'normal',
                cursor: 'pointer',
                textAlign: 'center',
                transition: 'all 0.2s'
              }}
            >
              {key === 'fast' && 'โก ุณุฑูุน'}
              {key === 'balanced' && 'โ๏ธ ูุชูุงุฒู'}
              {key === 'robust' && '๐ก๏ธ ููู'}
              {key === 'patient' && '๐ ุตุจูุฑ'}
            </button>
          ))}
          <button
            onClick={() => setPresetMode('custom')}
            style={{
              background: presetMode === 'custom' ? theme.accent2 : 'transparent',
              color: presetMode === 'custom' ? '#fff' : theme.text,
              border: `1px solid ${presetMode === 'custom' ? theme.accent2 : theme.input}`,
              borderRadius: 8,
              padding: '10px 8px',
              fontSize: 12,
              fontWeight: presetMode === 'custom' ? 'bold' : 'normal',
              cursor: 'pointer',
              textAlign: 'center',
              transition: 'all 0.2s'
            }}
          >
            ๐ง ูุฎุตุต
          </button>
        </div>
      </div>

      {/* ูุตู ุงูููุท ุงููุฎุชุงุฑ */}
      <div style={{
        background: `${theme.accent}15`,
        borderRadius: 8,
        padding: 12,
        marginBottom: 20,
        fontSize: 13,
        color: theme.text
      }}>
        {presetMode === 'fast' && (
          <div>
            <strong>โก ุงูููุท ุงูุณุฑูุน:</strong> ุฃูู ุนุฏุฏ ูุญุงููุงุชุ ุงูุชุธุงุฑ ูุตูุฑุ ุชุฎุทู ุงููุฑุงุญู ุงููุงุดูุฉ.
            ููุงุณุจ ููุงุฎุชุจุงุฑ ุงูุณุฑูุน.
          </div>
        )}
        {presetMode === 'balanced' && (
          <div>
            <strong>โ๏ธ ุงูููุท ุงููุชูุงุฒู:</strong> ุชูุงุฒู ุจูู ุงูุณุฑุนุฉ ูุงูุฌูุฏุฉุ ูุญุงููุงุช ูุนูููุฉุ 
            ุงุณุชุฎุฏุงู ุงูุณูุงู ุนูุฏ ุงููุดู. ุงูุฃูุถู ููุงุณุชุฎุฏุงู ุงูุนุงู.
          </div>
        )}
        {presetMode === 'robust' && (
          <div>
            <strong>๐ก๏ธ ุงูููุท ุงูููู:</strong> ูุญุงููุงุช ุฃูุซุฑุ ุงูุชุธุงุฑ ุฃุทููุ ููุงููุฉ ุนุงููุฉ ููุฃุฎุทุงุก.
            ููุงุณุจ ูููุถุงูุง ุงููููุฉ.
          </div>
        )}
        {presetMode === 'patient' && (
          <div>
            <strong>๐ ุงูููุท ุงูุตุจูุฑ:</strong> ุฃูุตู ุนุฏุฏ ูุญุงููุงุชุ ูุง ุชุฎุทู ุงููุฑุงุญู ุงูุญุฑุฌุฉุ
            ุฌูุฏุฉ ุนุงููุฉ ูุถูููุฉ. <span style={{ color: theme.accent, fontWeight: 'bold' }}>ููุตู ุจู ูููุชุงุฆุฌ ุงููุซุงููุฉ!</span>
          </div>
        )}
        {presetMode === 'custom' && (
          <div>
            <strong>๐ง ุฅุนุฏุงุฏุงุช ูุฎุตุตุฉ:</strong> ููููู ุชุฎุตูุต ูู ุฅุนุฏุงุฏ ุญุณุจ ุงุญุชูุงุฌุงุชู.
          </div>
        )}
      </div>

      {/* ุงูุฅุนุฏุงุฏุงุช ุงูููุตูุฉ (ููููุท ุงููุฎุตุต ุฃู ุงูุนุฑุถ) */}
      {(presetMode === 'custom' || true) && (
        <div style={{
          display: 'grid',
          gridTemplateColumns: isMobile ? '1fr' : 'repeat(2, 1fr)',
          gap: 16
        }}>
          {/* ุนุฏุฏ ุงููุญุงููุงุช ุงูุนุงุฏูุฉ */}
          <div>
            <label style={{
              display: 'block',
              fontSize: 13,
              fontWeight: 'bold',
              marginBottom: 6,
              color: theme.text
            }}>
              ุนุฏุฏ ุงููุญุงููุงุช ูููุฑุงุญู ุงูุนุงุฏูุฉ: {config.maxRetries}
            </label>
            <input
              type="range"
              min="1"
              max="20"
              value={config.maxRetries}
              onChange={(e) => handleConfigChange('maxRetries', parseInt(e.target.value))}
              disabled={presetMode !== 'custom'}
              style={{
                width: '100%',
                opacity: presetMode !== 'custom' ? 0.6 : 1
              }}
            />
            <div style={{ fontSize: 11, color: theme.text, opacity: 0.7, marginTop: 2 }}>
              1 = ุณุฑูุน ุฌุฏุงูุ 20 = ุตุจูุฑ ุฌุฏุงู
            </div>
          </div>

          {/* ุนุฏุฏ ุงููุญุงููุงุช ูููุฑุงุญู ุงูุญุฑุฌุฉ */}
          <div>
            <label style={{
              display: 'block',
              fontSize: 13,
              fontWeight: 'bold',
              marginBottom: 6,
              color: theme.text
            }}>
              ุนุฏุฏ ุงููุญุงููุงุช ูููุฑุงุญู ุงูุญุฑุฌุฉ: {config.criticalStageRetries}
            </label>
            <input
              type="range"
              min="1"
              max="30"
              value={config.criticalStageRetries}
              onChange={(e) => handleConfigChange('criticalStageRetries', parseInt(e.target.value))}
              disabled={presetMode !== 'custom'}
              style={{
                width: '100%',
                opacity: presetMode !== 'custom' ? 0.6 : 1
              }}
            />
            <div style={{ fontSize: 11, color: theme.text, opacity: 0.7, marginTop: 2 }}>
              ุงููุฑุงุญู ุงูุฃุณุงุณูุฉ ุชุญุชุงุฌ ูุญุงููุงุช ุฃูุซุฑ
            </div>
          </div>

          {/* ูุชุฑุฉ ุงูุงูุชุธุงุฑ ุงูุฃุณุงุณูุฉ */}
          <div>
            <label style={{
              display: 'block',
              fontSize: 13,
              fontWeight: 'bold',
              marginBottom: 6,
              color: theme.text
            }}>
              ูุชุฑุฉ ุงูุงูุชุธุงุฑ ุงูุฃุณุงุณูุฉ: {config.baseDelay / 1000}ุซ
            </label>
            <input
              type="range"
              min="1000"
              max="15000"
              step="1000"
              value={config.baseDelay}
              onChange={(e) => handleConfigChange('baseDelay', parseInt(e.target.value))}
              disabled={presetMode !== 'custom'}
              style={{
                width: '100%',
                opacity: presetMode !== 'custom' ? 0.6 : 1
              }}
            />
            <div style={{ fontSize: 11, color: theme.text, opacity: 0.7, marginTop: 2 }}>
              ูุชุฑุฉ ุงูุชุธุงุฑ ุจูู ุงููุฑุงุญู ูุงููุญุงููุงุช
            </div>
          </div>

          {/* ุฃูุตู ูุชุฑุฉ ุงูุชุธุงุฑ */}
          <div>
            <label style={{
              display: 'block',
              fontSize: 13,
              fontWeight: 'bold',
              marginBottom: 6,
              color: theme.text
            }}>
              ุฃูุตู ูุชุฑุฉ ุงูุชุธุงุฑ: {config.maxDelay / 1000}ุซ
            </label>
            <input
              type="range"
              min="15000"
              max="120000"
              step="5000"
              value={config.maxDelay}
              onChange={(e) => handleConfigChange('maxDelay', parseInt(e.target.value))}
              disabled={presetMode !== 'custom'}
              style={{
                width: '100%',
                opacity: presetMode !== 'custom' ? 0.6 : 1
              }}
            />
            <div style={{ fontSize: 11, color: theme.text, opacity: 0.7, marginTop: 2 }}>
              ุฃูุตู ุงูุชุธุงุฑ ุนูุฏ ูุดุงูู ุงูุดุจูุฉ
            </div>
          </div>
        </div>
      )}

      {/* ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ */}
      <div style={{ marginTop: 20 }}>
        <div style={{
          fontSize: 14,
          fontWeight: 'bold',
          marginBottom: 12,
          color: theme.text
        }}>
          ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ:
        </div>

        {/* ูุถุน ุงูุชุนุงูู ูุน ุงููุดู */}
        <div style={{ marginBottom: 12 }}>
          <label style={{
            display: 'block',
            fontSize: 13,
            fontWeight: 'bold',
            marginBottom: 6,
            color: theme.text
          }}>
            ูุถุน ุงูุชุนุงูู ูุน ูุดู ุงููุฑุงุญู:
          </label>
          <select
            value={config.failureRecoveryMode}
            onChange={(e) => handleConfigChange('failureRecoveryMode', e.target.value)}
            disabled={presetMode !== 'custom'}
            style={{
              width: '100%',
              padding: '8px 12px',
              border: `1px solid ${theme.input}`,
              borderRadius: 6,
              background: theme.background,
              color: theme.text,
              fontSize: 13,
              opacity: presetMode !== 'custom' ? 0.6 : 1
            }}
          >
            <option value="skip">ุชุฎุทู ุงููุฑุงุญู ุงููุงุดูุฉ</option>
            <option value="retry_with_context">ุฅุนุงุฏุฉ ุงููุญุงููุฉ ูุน ุงูุณูุงู</option>
            <option value="block_until_success">ุนุฏู ุงููุชุงุจุนุฉ ุญุชู ุงููุฌุงุญ</option>
          </select>
        </div>

        {/* ููุงุชูุญ ุงูุชุดุบูู */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: '1fr 1fr',
          gap: 12
        }}>
          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            fontSize: 13,
            color: theme.text,
            cursor: presetMode === 'custom' ? 'pointer' : 'default',
            opacity: presetMode !== 'custom' ? 0.6 : 1
          }}>
            <input
              type="checkbox"
              checked={config.qualityOverSpeed}
              onChange={(e) => handleConfigChange('qualityOverSpeed', e.target.checked)}
              disabled={presetMode !== 'custom'}
              style={{ cursor: presetMode === 'custom' ? 'pointer' : 'default' }}
            />
            ุฃููููุฉ ุงูุฌูุฏุฉ ุนูู ุงูุณุฑุนุฉ
          </label>

          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            fontSize: 13,
            color: theme.text,
            cursor: presetMode === 'custom' ? 'pointer' : 'default',
            opacity: presetMode !== 'custom' ? 0.6 : 1
          }}>
            <input
              type="checkbox"
              checked={config.patientMode}
              onChange={(e) => handleConfigChange('patientMode', e.target.checked)}
              disabled={presetMode !== 'custom'}
              style={{ cursor: presetMode === 'custom' ? 'pointer' : 'default' }}
            />
            ุงูููุท ุงูุตุจูุฑ (ุฃูุถู ุงููุชุงุฆุฌ)
          </label>
        </div>
      </div>

      {/* ูุนูููุงุช ุฅุถุงููุฉ */}
      <div style={{
        marginTop: 16,
        padding: 12,
        background: `${theme.accent2}15`,
        borderRadius: 8,
        fontSize: 12,
        color: theme.text
      }}>
        <div style={{ fontWeight: 'bold', marginBottom: 6 }}>๐ก ูุตุงุฆุญ ููุญุตูู ุนูู ุฃูุถู ุงููุชุงุฆุฌ:</div>
        <ul style={{ margin: 0, paddingRight: 16 }}>
          <li>ุงุณุชุฎุฏู \"ุงูููุท ุงูุตุจูุฑ\" ูููุถุงูุง ุงููููุฉ - ูุง ููู ุงูููุช ุงููุณุชุบุฑู</li>
          <li>ุฒูุงุฏุฉ ุนุฏุฏ ุงููุญุงููุงุช ุชููู ูุฑุต ูุดู ุงููุฑุงุญู</li>
          <li>ูุชุฑุงุช ุงูุงูุชุธุงุฑ ุงูุฃุทูู ุชุชุฌูุจ ูุดุงูู ุญุฏูุฏ ุงูุงุณุชุฎุฏุงู</li>
          <li>ูุถุน \"ุนุฏู ุงููุชุงุจุนุฉ ุญุชู ุงููุฌุงุญ\" ูุถูู ุงูุชูุงู ูู ุงููุฑุงุญู</li>
        </ul>
      </div>

      {/* ุชูุฏูุฑ ุงูููุช */}
      <div style={{
        marginTop: 12,
        padding: 10,
        background: theme.background,
        borderRadius: 6,
        fontSize: 12,
        color: theme.text,
        opacity: 0.8
      }}>
        <strong>ุชูุฏูุฑ ุงูููุช ุงููุชููุน:</strong> {estimateAnalysisTime(config)} ุฏูููุฉ
        {config.patientMode && (
          <span style={{ color: theme.accent, fontWeight: 'bold' }}>
            {" "}- ุฌูุฏุฉ ุนุงููุฉ ูุถูููุฉ! ๐ฏ
          </span>
        )}
      </div>
    </div>
  );
};

// ุฏุงูุฉ ุชูุฏูุฑ ุงูููุช
function estimateAnalysisTime(config: any): string {
  const baseTimePerStage = 30; // ุซุงููุฉ
  const retryTime = config.maxRetries * (config.baseDelay / 1000);
  const totalStages = 34; // ุนุฏุฏ ุงููุฑุงุญู ุงูุงูุชุฑุงุถู
  
  const estimatedSeconds = (baseTimePerStage + retryTime) * totalStages;
  const minutes = Math.round(estimatedSeconds / 60);
  
  if (config.patientMode) {
    return `${minutes * 1.5}-${minutes * 2}`;
  } else if (config.qualityOverSpeed) {
    return `${minutes}-${minutes * 1.3}`;
  } else {
    return `${minutes * 0.7}-${minutes}`;
  }
}

export default EnhancedAnalysisSettings;